<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How-to-deploy</title>
      <link href="/2021/01/12/how-to-deploy/"/>
      <url>/2021/01/12/how-to-deploy/</url>
      
        <content type="html"><![CDATA[<p>目前公司的開發流程有點類似於 GitFlow，使用 Jenkins 部屬，且主要是由我來部屬上版，也因此我花了不少時間在研究以及了解部屬流程。</p><a id="more"></a><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>我目前公司的開發流程相較於 GitFlow 少了 release 階段。有 Alpha 測試，Beta 測試，Gamma 測試，三個測試跑完之後才會部屬上 Demo 和 Production。</p><ul><li>Alpha 測試使用 feature 分支，供前後端內部測試使用。測試完 merge 進去 develop。</li><li>Beta 測試使用 develop 分支，供 QA 和 PM 測試。測試完後 merge 進去 master。</li><li>Gamma 測試使用 hotfix 分支，供 QA 和 PM 測試。測試完後 merge 進去 develop 和 master。</li><li>Demo 和 Production 使用 master 分支，供正式使用。</li></ul><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>目前公司的 Jenkins 部屬一次大概要花七至十分鐘。其中 Gamma 測試最麻煩，因為需要更新到兩個分支，而且還要確保正式環境不會有問題。</p><p>另外我們平常開發時通常使用 git pull –rebase，而在 merge 回其他分支時使用 git merge。rebase 的好處在於能夠消除不必要的合併提交，但是在像是 feature 分支 merge 進去 develop 時就不適合使用 rebase，因為會產生許多 conflict。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>formik-yup-form</title>
      <link href="/2020/12/12/formik-yup-form/"/>
      <url>/2020/12/12/formik-yup-form/</url>
      
        <content type="html"><![CDATA[<p>最近換公司，新公司需要實作許多表單供使用者填寫。React 表單的套件繁多，各有優缺，而我目前只有用過 Formik，故不做比較，只分享我目前的心得。</p><a id="more"></a><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p><a href="https://formik.org/" target="_blank" rel="noopener">Formik</a> 提供了兩種建立表單的方式，第一種是組件的方式，像是 <code>&lt;Field&gt;</code>，預設是<code>&lt;input&gt;</code>元件，又或是透過 <code>&lt;Field as=&quot;select&quot;&gt;</code> 則是<code>&lt;select&gt;</code>元件。而如果想要使用自己的組件則需要使用<code>&lt;Field component&gt;</code>。</p><p>不過因為我新公司已經有一套自己的組件使用了。所以是使用另一種透過 hook 以及 context 的方式，將 Formik 所需的方法以及變數拿來使用。Formik 提供了 <code>useFormikContext()</code> 的方式，取得我們所設定好的表單初始值和初始狀態，以及 Formik 原本就有的方法。</p><p>最後，錯誤驗證則是結合了 <a href="https://github.com/jquense/yup" target="_blank" rel="noopener">Yup</a> ，Yup 的錯誤規則蠻簡單上手的，而且還有支援正則。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>隨著單頁的 <code>input</code> 的數量增加，輸入的速度也會有所延遲。這是因為每個輸入都會觸發 <code>onChange</code> 進行驗證，最後的解決方法是改在 <code>onBlur</code> 時才觸發驗證。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ-Syslog-Cacti</title>
      <link href="/2020/06/23/RabbitMQ-Syslog-Cacti/"/>
      <url>/2020/06/23/RabbitMQ-Syslog-Cacti/</url>
      
        <content type="html"><![CDATA[<p>  有個需求是將外面設備的 syslog 經由 RabbitMQ，傳送到另外一台伺服器上，透過 Cacti syslog 的插件查看狀況。</p><a id="more"></a><h2 id="難題"><a href="#難題" class="headerlink" title="難題"></a>難題</h2><ol><li>如何操作 RabbitMQ 收送訊息</li><li>如何用 Python 傳送 syslog </li><li>如何轉換 syslog 時區與格式</li></ol><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>  用了兩天的時間看了 Python syslog 以及 RabbitMQ。</p><p>  一開始先下載 RabbitMQ docker container，並找了一個 RabbmitMQ 簡單的收發訊息的程式測試成功。（難題一)<br><br></p><p>  接下來花蠻多時間在研究 Python syslog，我這階段也是找了一個範例程式研究。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = logging.handlers.SysLogHandler(address=(&apos;127.0.0.1&apos;, 514), facility=&apos;local1&apos;)</span><br></pre></td></tr></table></figure></p><p>  上面這段程式就是設置要傳送到本機端的 514 port，以及隨意設定的 facility。<br>  然後還有其他基本設定就不贅述，設定成功後就能在 Cacti 上看到所傳送的訊息了(難題二)<br><br></p><p>  但是發現 Cacti 上的 log 時間格式錯誤，<br>  於是我就參考<a href="https://stackoverflow.com/questions/32402502/how-to-change-the-time-zone-in-python-logging" target="_blank" rel="noopener">該連結</a>，  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Formatter(logging.Formatter):</span><br><span class="line">  &quot;&quot;&quot;override logging.Formatter to use an aware datetime object&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">  def converter(self, timestamp):</span><br><span class="line">      dt = datetime.datetime.fromtimestamp(timestamp)</span><br><span class="line">      tzinfo = pytz.timezone(&apos;Asia/Taipei&apos;)</span><br><span class="line">      return tzinfo.localize(dt)</span><br><span class="line"></span><br><span class="line">  def formatTime(self, record, datefmt=None):</span><br><span class="line">      dt = self.converter(record.created)</span><br><span class="line">      if datefmt:</span><br><span class="line">          s = dt.strftime(datefmt)</span><br><span class="line">      else:</span><br><span class="line">          try:</span><br><span class="line">              s = dt.isoformat(timespec=&apos;milliseconds&apos;)</span><br><span class="line">          except TypeError:</span><br><span class="line">              s = dt.isoformat()</span><br><span class="line">      return s</span><br></pre></td></tr></table></figure></p><p>  成功設置好時區就可以了。(難題三)</p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux-performance</title>
      <link href="/2020/06/20/Redux-performance/"/>
      <url>/2020/06/20/Redux-performance/</url>
      
        <content type="html"><![CDATA[<p>  記錄個之前都沒遇過的問題，關於 Redux 的效率問題。</p><a id="more"></a><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>  昨天發現在 Redux 裡面塞太多資料時，會導致頁面切換速度緩慢。原因是因為 Redux 在 shouldComponentUpdate 會進行 shallow compare，而我傳入的資料是大量的 array 導致 shallow compare 花的時間過多。</p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>  可以考慮在切換到其他頁面時清空資料，但是這樣會導致再切回去時要重新載入資料，或是改用 object 存取資料。</p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>  今天發現是因為我在另一個頁面產生的多個 canvas，在切換頁面之後還暫存著，導致頁面因此載入緩慢，而不是我在 Redux 存的資料太多的問題。不過上述 Redux 的效率問題依舊還是需要考慮。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cacti-syslog-docker</title>
      <link href="/2020/06/19/cacti-syslog-docker/"/>
      <url>/2020/06/19/cacti-syslog-docker/</url>
      
        <content type="html"><![CDATA[<p>  這篇文章中的東西都是我之前沒使用過的，用了一個禮拜的時間看 cacti 和 syslog，一個禮拜的時間看 docker。</p><a id="more"></a><h2 id="使用套件"><a href="#使用套件" class="headerlink" title="使用套件"></a>使用套件</h2><ol><li><a href="https://github.com/scline/docker-cacti.git" target="_blank" rel="noopener">cacti</a></li><li><a href="https://github.com/Cacti/plugin_syslog" target="_blank" rel="noopener">syslog</a></li><li><a href="https://github.com/rsyslog/rsyslog-docker" target="_blank" rel="noopener">rsyslog</a></li><li><a href="https://hub.docker.com/r/balabit/syslog-ng/" target="_blank" rel="noopener">syslog-ng</a></li><li><a href="https://www.docker.com/" target="_blank" rel="noopener">docker</a></li></ol><h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><p>  MacOS High Sierra 10.13.6</p><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  cacti:</span><br><span class="line">    image: &quot;smcline06/cacti&quot;</span><br><span class="line">    container_name: cacti</span><br><span class="line">    hostname: cacti</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - DB_NAME=cacti_master</span><br><span class="line">      - DB_USER=cactiuser</span><br><span class="line">      - DB_PASS=cactipassword</span><br><span class="line">      - DB_HOST=db</span><br><span class="line">      - DB_PORT=3306</span><br><span class="line">      - DB_ROOT_PASS=rootpassword</span><br><span class="line">      - INITIALIZE_DB=1</span><br><span class="line">      - TZ=Asia/Taipei</span><br><span class="line">    volumes:</span><br><span class="line">      - cacti-data:/cacti</span><br><span class="line">      - cacti-spine:/spine</span><br><span class="line">      - cacti-backups:/backups</span><br><span class="line">      - ./syslog:/cacti/plugins/syslog</span><br><span class="line">    links:</span><br><span class="line">      - db</span><br><span class="line">  </span><br><span class="line">  db:</span><br><span class="line">    image: maria</span><br><span class="line">    container_name: cacti_db</span><br><span class="line">    hostname: db</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    command:</span><br><span class="line">      - mysqld</span><br><span class="line">      - --character-set-server=utf8mb4</span><br><span class="line">      - --collation-server=utf8mb4_unicode_ci</span><br><span class="line">      - --max_connections=200</span><br><span class="line">      - --max_heap_table_size=128M</span><br><span class="line">      - --max_allowed_packet=32M</span><br><span class="line">      - --tmp_table_size=128M</span><br><span class="line">      - --join_buffer_size=128M</span><br><span class="line">      - --innodb_buffer_pool_size=1G</span><br><span class="line">      - --innodb_doublewrite=ON</span><br><span class="line">      - --innodb_flush_log_at_timeout=3</span><br><span class="line">      - --innodb_read_io_threads=32</span><br><span class="line">      - --innodb_write_io_threads=16</span><br><span class="line">      - --innodb_buffer_pool_instances=9</span><br><span class="line">      - --innodb_file_format=Barracuda</span><br><span class="line">      - --innodb_large_prefix=1</span><br><span class="line">      - --innodb_io_capacity=5000</span><br><span class="line">      - --innodb_io_capacity_max=10000</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=rootpassword</span><br><span class="line">      - TZ=Asia/Taipei</span><br><span class="line">    volumes:</span><br><span class="line">      - cacti-db:/var/lib/mysql</span><br><span class="line"></span><br><span class="line">  syslog_ng:</span><br><span class="line">    image: balabit/syslog-ng:3.14.1</span><br><span class="line">    command: &quot;--no-caps&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;32774:514/udp&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - DB_NAME=cacti_master</span><br><span class="line">      - DB_USER=cactiuser</span><br><span class="line">      - DB_PASS=cactipassword</span><br><span class="line">      - DB_HOST=db</span><br><span class="line">    volumes:</span><br><span class="line">      - ./syslog-ng/syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  cacti-db:</span><br><span class="line">  cacti-data:</span><br><span class="line">  cacti-spine:</span><br><span class="line">  cacti-backups:</span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>  我一開始先在一個 container 實驗，將 cacti + rsyslog + mariaDB 通通安裝在裡面，並且成功收到外面機器傳入的 syslog。</p><p>但是在使用 docker-compose 時遇到許多問題，首先是 rsyslog 無法將接收到的 syslog 寫入到 DB 的 table 中，因此我改用 syslog_ng 來接受傳入的 syslog。然後在 cacti 使用 syslog 插件時出現錯誤，發現是套件自動產生的 table 格式不對，因此我需要先 build 一個已經有建好 table 的 docker image。</p><p>我上面的 Docker-compose 就是使用自己 build 好的 maria image，其他要自行設定的還有 syslog-ng 以及自己下載的 syslog 插件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dva-redux-saga</title>
      <link href="/2020/02/26/dva-redux-saga/"/>
      <url>/2020/02/26/dva-redux-saga/</url>
      
        <content type="html"><![CDATA[<p>如果使用者在短時間內連續點擊頁面，使 Redux 連續取得資料並更新 props，導致頁面快速刷新。<br>為了改善該問題，我去看幾間網站的做法，大部分都是將除了最後一個點擊之外的連線需求取消。</p><a id="more"></a><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><ol><li><a href="https://github.com/dvajs/dva/issues/1749" target="_blank" rel="noopener">dva issue</a></li><li><a href="https://redux-saga.js.org/docs/advanced/TaskCancellation.html" target="_blank" rel="noopener">Redux Saga cancel</a></li></ol><p>從 1 中，我知道 dispatch type clear 可以取消當前 model 所有未完成的 effect，但是最後講到的 race 方法無法解決我的問題。</p><p>從 2 中，我找到了 cancel，於是我將 task fork 之後，記錄該 task。<br>也因此，我能夠在每次 dispach 時，檢查之前是否有 task，如果有，則將該 task cancel。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>目前還在檢查該作法是否有其他隱患。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dva-roadhog with babel problem</title>
      <link href="/2019/08/20/dva-roadhog-babel/"/>
      <url>/2019/08/20/dva-roadhog-babel/</url>
      
        <content type="html"><![CDATA[<p>  之前公司在開始專案之前並沒有考慮到跨瀏覽器問題，先是在 Safari 上遇到 CSS 不相容問題，現在又遇到要在 Android 4.0 的系統上運行網頁。同樣的也是如同 CSS 不相容時的狀況，開啟網頁後一片全白的狀況。</p><a id="more"></a><h2 id="框架介紹"><a href="#框架介紹" class="headerlink" title="框架介紹"></a>框架介紹</h2><p>  <a href="https://github.com/dvajs/dva" target="_blank" rel="noopener">dva</a><br>  <a href="https://github.com/sorrycc/roadhog" target="_blank" rel="noopener">roadhog</a></p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>   首先排除掉 CSS 不相容後，遇到個困難是要如何印出 error message。最後是在 index.ejs 最上面使用 window.onerror 來印出 error message。 </p><p>   最後印出 <code>Uncaught ReferenceError: Set is not defined</code>，通常是在無法識別 ES6 的語法時才會出現，而這可以使用 <a href="https://babeljs.io/docs/en/next/babel-polyfill.html" target="_blank" rel="noopener">babel-polyfill</a> 解決。但是我已經在 index.js 最上面 <code>import @babel/polyfill</code>，也因此我嘗試在其他地方引入 babel-polyfill。</p><p>   最後是在 .webpack.rc.js 的 entry 中配置 babel-polyfill，詳細情況如該 <a href="https://github.com/dvajs/dva/issues/1692#issuecomment-390560686" target="_blank" rel="noopener">issue</a>。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>   目前是還在尋找為什麼 <code>import @babel/polyfill</code> 沒有發揮作用，不過專案最後還是成功運行在 Android 4.0 上。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react-virtualized-tree</title>
      <link href="/2019/08/01/react-virtualized-tree/"/>
      <url>/2019/08/01/react-virtualized-tree/</url>
      
        <content type="html"><![CDATA[<p>  由於需要使用 tree 展示大量數據，而 <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design</a> 的 tree 在展示大量數據時，會導致畫面延遲，詳細重現以及解決方法可參考<a href="https://blog.logrocket.com/rendering-large-lists-with-react-virtualized-82741907a6b3/" target="_blank" rel="noopener">該篇</a>。</p><a id="more"></a><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>  我一開始是想使用 Tree 的節點，將一定數量的節點摺疊起來，需要時再展開。雖然這樣可以暫時解決問題，但是並不美觀，而且在大量展開節點時依舊會十分緩慢。因此我試了以下幾種套件。</p><ol><li><a href="https://github.com/venasolutions/react-lazy-paginated-tree" target="_blank" rel="noopener">react-lazy-paginated-tree</a></li><li><a href="https://github.com/diogofcunha/react-virtualized-tree" target="_blank" rel="noopener">react-virtualized-tree</a></li></ol><h2 id="react-lazy-paginated-tree"><a href="#react-lazy-paginated-tree" class="headerlink" title="react-lazy-paginated-tree"></a>react-lazy-paginated-tree</h2><p>  這個套件有點類似我一開始的作法，不過他有做 Lazy load 和 Pagination，而 Pagination 需要自己參考範例寫 Pagination function。</p><p>  最後考量到在同時展開多個節點的情境下，應該還是會造成網頁緩慢，故最後沒有選擇使用該套件。</p><p>  (P.S: 雖然我覺得可以透過限制使用者展開節點數量來避免這種狀況發生。)</p><h2 id="react-virtualized-tree"><a href="#react-virtualized-tree" class="headerlink" title="react-virtualized-tree"></a>react-virtualized-tree</h2><p>  該套件主要依賴於 <a href="https://github.com/bvaughn/react-virtualized" target="_blank" rel="noopener">react-virtualized</a>，virtualized 的原理可以參考<a href="https://github.com/dwqs/blog/issues/70" target="_blank" rel="noopener">該篇</a>，在我的理解就是只渲染固定區域的元素，然後在該區域滾動時刷新該區域當前所顯示之元素。而我在 Antd 中引用該套件時，無法正常顯示 icon。</p><p>  後來我把 <a href="https://www.npmjs.com/package/material-icons" target="_blank" rel="noopener">material-icons</a> 的字型檔加入後即可正常顯示。而在這之前，我嘗試將該套件 Icon 的事件，繼承到 Antd Icon 上面使用，但是一直無法成功，也因此只能使用該套件的預設的 Icon。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>  最後成功將原本 Antd tree 的組件替換為 react-virtualized-tree，不過相比起 Antd tree，react-virtualized-tree 有許多小細節需要修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React_proxy</title>
      <link href="/2019/07/11/React-proxy/"/>
      <url>/2019/07/11/React-proxy/</url>
      
        <content type="html"><![CDATA[<p>  我在做一個練手的展示頁面，使用的是 <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">create-react-app</a>。但是在嘗試想要爬取其他網站資料時，遇到 CORS 問題。</p><a id="more"></a><p>在這之前，我就有使用其他方式成功爬取網站過，但是反而在使用 create-react-app 時遇到 CORS 而無法爬取，所以我首先懷疑是否是 create-react-app 的設定問題，<br>最後才發現是 proxy 沒設定的問題。而我在公司時的專案由於已經都設定好 proxy 了，所以沒有遇到該問題，故這對我來說是新鮮的挑戰。</p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(proxy(<span class="string">'http://localhost:3000/search'</span>, &#123; <span class="attr">target</span>: <span class="string">'https://www.suruga-ya.jp'</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">  app.use(proxy(<span class="string">'http://localhost:3000/product/detail/'</span>, &#123; <span class="attr">target</span>: <span class="string">'https://www.suruga-ya.jp/'</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">  app.use(proxy(<span class="string">'http://localhost:3000/database/pics/game/'</span>, &#123; <span class="attr">target</span>: <span class="string">'https://www.suruga-ya.jp/'</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design初學心得</title>
      <link href="/2019/06/05/antdesign_about/"/>
      <url>/2019/06/05/antdesign_about/</url>
      
        <content type="html"><![CDATA[<p>  工作一年多了，工作一開始對 Javascript 還不太熟悉，就直接開始使用 Reactjs。理所當然的，基本知識面的不足加上 React 生態系的複雜，使我撞到過無數次牆。</p><a id="more"></a><p>不過就算是現在，我也不敢說自己已經熟悉 React 了，程度頂多就是剛入門。標題的 <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design</a> 是 React 的 UI 框架之一，不過其實並不太建議初學者直接從框架開始，因為會有一堆東西塞在框架裡面，而你卻不知道他們的功能是什麼，出問題時如果身旁沒有有經驗的人指導的話，很容易陷入誤區，挫折感會很大。</p><h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><p><a href="https://ant.design/docs/react/use-with-create-react-app-cn" target="_blank" rel="noopener">在 create-react-app 中使用</a>是 Ant Design 的教學頁面，如字面上的意思，就是使用 <a href="https://facebook.github.io/create-react-app/" target="_blank" rel="noopener">create-react-app</a> 初始化 Ant Design。create-react-app 是 React 官方支持，創建基本 SPA（Single Page Application）的工具。簡單的流程結束之後，只要輸入<code>npm start</code>，就可以看到最基本的頁面了。</p><h2 id="進階"><a href="#進階" class="headerlink" title="進階"></a>進階</h2><p>因為 Ant Design 是一個龐大的框架，而我們通常不會運用到全部的組件，因此就需要使用到按需加載。有兩種方法可以實現按需加載，第一種是引入組件時寫成 <code>import { XXX } from antd/lib/XXX</code>，而第二種則是使用 Ant design 自行開發的 babel 插件 <a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a>，設定完成之後，該插件能夠將原本的 <code>import { XXX } from &#39;antd&#39;</code> 轉換成<code>import { XXX } from antd/lib/XXX</code>。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>Ant Design 我較熟悉的是圖表組件，而他們的圖表組件是使用 <a href="https://bizcharts.net/products/bizCharts" target="_blank" rel="noopener">Bizchart</a> 完成的，所以如果對圖表組件有什麼想要新增或是疑問時，建議是直接去 Bizchart 官方網站找尋解答。而我在使用圖表組件時偶爾會遇到一些 responsive bug，部分圖表在縮放時表現的並不如預期。而且有些圖表組件的寬高設置也不是很彈性，需要動態獲取外層元件的寬高才能設定內層圖表組件的寬高。除此之外，Ant Design 我目前用起來都沒有遇到太大問題。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
